import Scanner from '../../src/scanner';
import Token from '../../src/token';
import { TokenType } from '../../src/tokenType';
import * as fs from 'fs';
import * as path from 'path';

let inputData = '';
beforeAll(() => {
  inputData = fs.readFileSync(path.join(__dirname, 'testData.js'), 'utf-8');
});

describe('scanner.test.ts', () => {
  test('scan tokens', () => {
    const exepctTokens: Token[] = [
      new Token(TokenType.VAR, 'var', 1),
      new Token(TokenType.IDENTIFIER, 'a', 1),
      new Token(TokenType.EQUAL, '=', 1),
      new Token(TokenType.STRING, 'a', 1),
      new Token(TokenType.SEMICOLON, ';', 1),
      new Token(TokenType.FUNCTION, 'function', 6),
      new Token(TokenType.IDENTIFIER, 'add', 6),
      new Token(TokenType.LEFT_PAREN, '(', 6),
      new Token(TokenType.IDENTIFIER, 'x', 6),
      new Token(TokenType.COMMA, ',', 6),
      new Token(TokenType.IDENTIFIER, 'y', 6),
      new Token(TokenType.RIGHT_PAREN, ')', 6),
      new Token(TokenType.lEFT_BRACE, '{', 6),
      new Token(TokenType.RETURN, 'return', 7),
      new Token(TokenType.IDENTIFIER, 'x', 7),
      new Token(TokenType.PLUS, '+', 7),
      new Token(TokenType.IDENTIFIER, 'y', 7),
      new Token(TokenType.SEMICOLON, ';', 7),
      new Token(TokenType.RIGHT_BRACE, '}', 8),
      new Token(TokenType.VAR, 'var', 9),
      new Token(TokenType.IDENTIFIER, 'cond', 9),
      new Token(TokenType.EQUAL, '=', 9),
      new Token(TokenType.IDENTIFIER, 'add', 9),
      new Token(TokenType.LEFT_PAREN, '(', 9),
      new Token(TokenType.NUMBER, '1', 9),
      new Token(TokenType.COMMA, ',', 9),
      new Token(TokenType.NUMBER, '2', 9),
      new Token(TokenType.STAR, '*', 9),
      new Token(TokenType.NUMBER, '3', 9),
      new Token(TokenType.RIGHT_PAREN, ')', 9),
      new Token(TokenType.SEMICOLON, ';', 9),
      new Token(TokenType.IDENTIFIER, 'cond', 10),
      new Token(TokenType.SEMICOLON, ';', 10),
      new Token(TokenType.IF, 'if', 11),
      new Token(TokenType.LEFT_PAREN, '(', 11),
      new Token(TokenType.IDENTIFIER, 'cond', 11),
      new Token(TokenType.RIGHT_PAREN, ')', 11),
      new Token(TokenType.lEFT_BRACE, '{', 11),
      new Token(TokenType.IDENTIFIER, 'a', 12),
      new Token(TokenType.EQUAL, '=', 12),
      new Token(TokenType.STRING, 'b', 12),
      new Token(TokenType.SEMICOLON, ';', 12),
      new Token(TokenType.RIGHT_BRACE, '}', 13),
      new Token(TokenType.ELSE, 'else', 13),
      new Token(TokenType.lEFT_BRACE, '{', 13),
      new Token(TokenType.IDENTIFIER, 'a', 14),
      new Token(TokenType.EQUAL, '=', 14),
      new Token(TokenType.STRING, 'c', 14),
      new Token(TokenType.SEMICOLON, ';', 14),
      new Token(TokenType.RIGHT_BRACE, '}', 15),
      new Token(TokenType.IDENTIFIER, 'a', 16),
      new Token(TokenType.SEMICOLON, ';', 16),

      new Token(TokenType.FUNCTION, 'function', 18),
      new Token(TokenType.IDENTIFIER, 'makeCounter', 18),
      new Token(TokenType.LEFT_PAREN, '(', 18),
      new Token(TokenType.RIGHT_PAREN, ')', 18),
      new Token(TokenType.lEFT_BRACE, '{', 18),
      new Token(TokenType.VAR, 'var', 19),
      new Token(TokenType.IDENTIFIER, 'i', 19),
      new Token(TokenType.EQUAL, '=', 19),
      new Token(TokenType.NUMBER, '0', 19),
      new Token(TokenType.SEMICOLON, ';', 19),
      new Token(TokenType.FUNCTION, 'function', 20),
      new Token(TokenType.IDENTIFIER, 'count', 20),
      new Token(TokenType.LEFT_PAREN, '(', 20),
      new Token(TokenType.RIGHT_PAREN, ')', 20),
      new Token(TokenType.lEFT_BRACE, '{', 20),
      new Token(TokenType.IDENTIFIER, 'i', 21),
      new Token(TokenType.EQUAL, '=', 21),
      new Token(TokenType.IDENTIFIER, 'i', 21),
      new Token(TokenType.PLUS, '+', 21),
      new Token(TokenType.NUMBER, '1', 21),
      new Token(TokenType.SEMICOLON, ';', 21),
      new Token(TokenType.RETURN, 'return', 22),
      new Token(TokenType.IDENTIFIER, 'i', 22),
      new Token(TokenType.SEMICOLON, ';', 22),
      new Token(TokenType.RIGHT_BRACE, '}', 23),
      new Token(TokenType.RETURN, 'return', 25),
      new Token(TokenType.IDENTIFIER, 'count', 25),
      new Token(TokenType.SEMICOLON, ';', 25),
      new Token(TokenType.RIGHT_BRACE, '}', 26),
      new Token(TokenType.VAR, 'var', 28),
      new Token(TokenType.IDENTIFIER, 'counter', 28),
      new Token(TokenType.EQUAL, '=', 28),
      new Token(TokenType.IDENTIFIER, 'makeCounter', 28),
      new Token(TokenType.LEFT_PAREN, '(', 28),
      new Token(TokenType.RIGHT_PAREN, ')', 28),
      new Token(TokenType.SEMICOLON, ';', 28),
      new Token(TokenType.IDENTIFIER, 'counter', 29),
      new Token(TokenType.LEFT_PAREN, '(', 29),
      new Token(TokenType.RIGHT_PAREN, ')', 29),
      new Token(TokenType.SEMICOLON, ';', 29),
      new Token(TokenType.IDENTIFIER, 'counter', 30),
      new Token(TokenType.LEFT_PAREN, '(', 30),
      new Token(TokenType.RIGHT_PAREN, ')', 30),
      new Token(TokenType.SEMICOLON, ';', 30),

      new Token(TokenType.VAR, 'var', 31),
      new Token(TokenType.IDENTIFIER, 'n', 31),
      new Token(TokenType.EQUAL, '=', 31),
      new Token(TokenType.NUMBER, '1', 31),
      new Token(TokenType.SEMICOLON, ';', 31),

      new Token(TokenType.PLUS_PLUS, '++', 32),
      new Token(TokenType.IDENTIFIER, 'n', 32),
      new Token(TokenType.SEMICOLON, ';', 32),

      new Token(TokenType.MINUS_MINUS, '--', 33),
      new Token(TokenType.IDENTIFIER, 'n', 33),
      new Token(TokenType.SEMICOLON, ';', 33),

      new Token(TokenType.EOF, '', 50),
    ];

    expect(new Scanner(inputData).scanTokens()).toEqual(exepctTokens);
  });
});
